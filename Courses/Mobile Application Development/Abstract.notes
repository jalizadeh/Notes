#01. Introduction to Android
-----------------------------------------
	Android Components
	`````````````````
		Activity:
			has GUI
			a user can have interaction with that
			can perform an action inside it

		Services
			a component that runs in the background
			usually used for long-time running tasks, like playing music
			doesn`t have GUI

		Content Provider
			it manages application data to store the data in filesystem, database or ..., when the application needs data, it will deliver to that and this connection is done via "content resolver"

		BroadcastReciever
			it waits for the "messages" created by the system or application, like when the battery is low
			it has no GUI, but can create notifications


	!as long as there is a component, the application is working


	Application Lifecycle
	`````````````````
		application`s functionalities are provided in a "XML" file called "manifest file" that contains all the permissions and configuration

		application object is created in a single & new process

		!as long as there is an active component, application object remains in the memory



	Application Startup Process
	``````````````````````
		1. user taps on the icon
		2. an Intent Package containing the information about chosen application is sent to Zygot that forks a new process
		3. the forked process start a message loop and uses the information inside the recieved intent to locate APK and manifest
		4. the application object is instantiated [onCreate()]
		5. the activity refered by the intent, is created [onCreate()]

	
	Intent
	``````
		is a particular kind of message, used to activate other application and exchange data to them

		three important parts:
			1. action: a unique string describing what is requested, has happened
			2. data: the data to operate upon, (=URI)
			3. category: kind of the component should handle the intent





#03. Activities
-----------------------------------------
	manages user interaction
	acquire required resources
	build and configure the GUI
	react to the events and interactions
	manages notifications regarding to its own lifecycle

	Lifecycle
	```````
		!complete diagram in slide

		1. onCreate()
			2. onStart()
				3. onResume()
					//activity is running now
				4. onPause()
			5. onStop()
		6. onDestroy()

		1,6: activity exists but is not visible to user
		2,5: activity is visible but user can not interact
		3,4: activity is in foreground and user can interact

		onResume():
			In this method, it is possible to start animations, videos, sounds, ... , and to acquire temporary resources

		onPause():
			activity is sent to the 2nd position in the stack and all the operation interacting with the user, must be stopped

		onStop():
			called when the application is no longer visible to the user

		onDestroy():
			called when the activity is terminated and no longer in the memory
			can be triggered be the user, or in lack of memory space




	GUI
	````
		via XML: graphical hierarchy and every view is defined in a XML file
		via Code: dynamically created programmatically
		hybrid: using both techniques together

		each has its own cons & pros




	Saving the state of an activity
	````````````````````````
		it is possible to save the current state of an activity by keeping it in a "Bundle"
		
		save: 
			OnSaveInstanceState(Bundle b);
			stores primitive data or data implementing the Serializable or Parcelable interface

		restore:
			use OnRestoreInstanceState() at any cycle of an activity that is needed




	Context and resources
	``````````````````
		context:
			activities, services and applications have it
			provides functionalities needed to access resources & application-specific classes & operating system
			start activity instances
			getting assets included in the application
			request system services
			manage files, directories, and databases accessible only to the current application
			check and activate application authorizations

		resource:
			each resource has a unique number autogenerated at compile time and stroed in class "R"
			to access a resource getResources()




#04 GUI
-----------------------------------------
	Operational Challenges
	```````````````````
		1. physical dimensions (readability, interactivity)
		2. screen resolution (amount of overall displayable information)
		3. dot density (ratio between 1 & 2)
		4. orientation (layout and logical organization of content)


	Analysis of the context 
		user
		behavior
		feedback & flexibility





#07 Firebase
-----------------------------------------
	Real-time, NoSQL backend as a service (BAAS)
	designed to be spreaded over several machines and scaled by:
		1. number of records
		2. number of concurrent users

	Key-Value pairs are stored in JSON Document





#08 Fragment
-----------------------------------------
	fragment is an object that conceptually stands between activity & view
	-> as an activity:
		it has a complex lifecycle which is handled by several callbacks

	-> as a view:
		encapsulate a hierarchy of views, and can also contain a XML file

	-> in the absence of special actions, it will follow the lifecycle of the activity and will be destroyed when the activity is destroyed

	Lifecycle
	```````
		onAttach (Activity), onDetach ()
			Notify that the fragment is associated with an activity or it will be detached

		onCreateView (...), onDestroyView ()
			Require the fragment to create/release its view

		onActivityCreated (Bundle)
			Indicates that the activity has finished its creation


		static:
					Activity 								Fragment
			1.		onCreate()
			2. 												onAttach()
			3. 		onAttachFragment()
			4. 												onCreate()
			5. 												onCreateView()
			6. 												onActivityCreated()
			7. 		onStart()
			8. 												onStart()
			9. 		onResume()
			10. 											onResume()

			--

			1. 		onPause()
			2. 												onPause()
			3. 		onStop()
			4. 												onStop()
			5. 		onDestroy()
			6. 												onDestroyView()
			7. 												onDestroy()
			8. 												onDetach()



		dynamic:
					Activity 								Fragment
			1. 		onCreate()
			2. 		onStart()
			3. 		onResume()
			4. 												onAttach()
			5. 		onAttachFragment()
			6. 												onCreate()
			7. 												onCreateView()
			8. 												onActivityCreated()
			9. 												onStart()
			10.											onResume()


[to be continued...]